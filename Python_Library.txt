1. itertools - 순열과 조합 라이브러리 제공
- permutations #순열

     from itertools import permutations

     data = ['A','B','C']

     result = list(permutations(data,3))

- combinations #조합

- product #중복 순열

    list(product(data,repeat=2))

- combinations_with_replacement #중복 조합

    list(combinations_with_replacement(data,2))

2. heapq- 힙 기능 제공 (우선순위 큐)
최소 힙으로 구성

- 생성 : h =[]

- 삽입 : heapq.heappush(h,넣을 값)

- 제거 : heapq.heappop(h)

 

최대 힙 사용 방법 : 원소의 부호를 임시로 변경하는 방식

import heapq

def heapsort(iterable):

   h=[]

   result=[]

   for value in iterable:

      heapq.heappush(h,-value)

   for i in range(len(h)):

      result.append(-heapq.heappop(h))

   return result

 

3. bisect - 이진 탐색 기능 제공
- 정렬된 배열에서 특정한 원소를 찾아야 할 때 효과적

from bisect import biset_left, bisect_right

- bisect_left(list,x) #시간복잡도 O(logN)

  리스트에서 데이터 x를 삽입할 가장 왼쪽 인덱스를 찾는 메서드

- bisect_right(list,x) #시간복잡도 O(logN)

   리스트에서 데이터 x를 삽입할 가장 오른쪽 인덱스를 찾는 메서드

4. collections - deque, Counter 자료구조 제공
from collections import Counter

counter=Counter(['red','blue','red'])

print(count['red'])

5.math - factorial, 제곱근, 최대공약수, 삼각함수, 파이 등
- math.factorial(5)

- math.sqrt(6) #6의 제곱근을 출력

- math.gcd(21,14)

- math.pi #원주율 출력

- math.e #자연상수 e 출력

6. 내장함수
- input()

- print()

- sum() : 리스트와 같은 iterable 객체의 합 반환

- min(), max()

- eval() : 수학 수식이 문자열 형식으로 들어왔을 때 계산 결과 반환

     result= eval("(3+5)*7")

     답 : 56

- sorted() : iterable 객체가 들어왔을 떄 정렬된 결과 반환

     sorted([9,1,5,4,1],reverse=True)
